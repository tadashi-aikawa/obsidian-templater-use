#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const { exit } = require("process");
const execSync = require("child_process").execSync;

const root = path.resolve(__dirname, "../");

function showHelp() {
  console.log(
    `
[Initialize tempura project]
tampura init
tampura --init

[Build project]
tempura
tampura dev
tampura --dev

[Update self(tempura)]
tampura update
tampura --update

[Show help]
tempura help
tempura --help
`.trim()
  );
}

const INSTALL_DEPENDENCIES_COMMAND =
  "npm install -D typescript@5.2 @tsconfig/node18 chokidar@3 @babel/core@7 @babel/plugin-transform-typescript@7 obsidian@^1.4.11";

function init() {
  fs.mkdirSync("src");
  console.log(`"src" directory is created.`);

  fs.cpSync(path.resolve(root, "assets/test.ts"), "./src/test.ts");
  console.log(`"src/test.ts" is created.`);

  fs.cpSync(path.resolve(root, "assets/config.json"), "./config.json");
  console.log(`"config.json" is created.`);

  fs.cpSync(path.resolve(root, "assets/tempura.d.ts"), "./tempura.d.ts");
  console.log(`"tempura.d.ts" is created.`);

  fs.cpSync(path.resolve(root, "assets/tsconfig.json"), "./tsconfig.json");
  console.log(`"tsconfig.json" is created.`);

  console.log(`Installing dependencies...`);
  execSync(INSTALL_DEPENDENCIES_COMMAND);

  execSync("npm pkg set type=module");
  console.log("Set type=module");

  fs.cpSync(path.resolve(root, "assets/.editorconfig"), "./.editorconfig");
  console.log(`".editorconfig" is created.`);
}

function update() {
  console.log(`Updating obsidian-tempura...`);
  execSync("npm update obsidian-tempura && npm install obsidian-tempura");

  fs.cpSync(path.resolve(root, "assets/tempura.d.ts"), "./tempura.d.ts");
  console.log(`"tempura.d.ts" is updated.`);

  console.log(`Installing dependencies...`);
  execSync(INSTALL_DEPENDENCIES_COMMAND);
}

function deployScript(scriptPath) {
  const hotCommand = `node ${root}/dev.mjs deploy "${scriptPath}"`;
  try {
    execSync(hotCommand, { stdio: "inherit" });
  } catch (error) {
    console.error(`Failed to execute "${hotCommand}":`, error);
  }
}

function loadConfig() {
  config = JSON.parse(fs.readFileSync("./config.json", { encoding: "utf8" }));
  if (!config?.scriptFilesFolderLocation) {
    throw new Error(
      "The `scriptFilesFolderLocation` key in the `config.json` is required."
    );
  }
  if (!config?.deployMap) {
    throw new Error("The `deployMap` key in the `config.json` is required.");
  }
  return config;
}

function dev() {
  let config;
  try {
    config = loadConfig();
  } catch (e) {
    console.error(e);
    exit(1);
  }

  deployScript(config.scriptFilesFolderLocation);

  const chokidar = require("chokidar");
  Object.entries(config.deployMap).forEach(([src, dist]) => {
    fs.mkdirSync(dist, { recursive: true });

    const watcher = chokidar.watch(src, {
      persistent: true,
    });

    const handler = (target) => {
      const distFile = target.replace(src, dist).replace(/.ts$/, ".md");

      const hotCommand = `node ${root}/dev.mjs build "${target}" "${distFile}"`;
      console.log(`👺 File ${target} has been changed.`);
      console.log(`  📜 Running "${hotCommand}"...`);
      try {
        execSync(hotCommand, { stdio: "inherit" });
        console.log(`  ✨ success build 📁${dist}`);
      } catch (error) {
        console.error(`  ❌ Failed to execute "${hotCommand}":`, error);
      }
    };

    watcher.on("add", handler);
    watcher.on("change", handler);
  });

  console.log("👀 Watching files for changes...");
}

const [command] = process.argv.slice(2);
switch (command) {
  case undefined:
  case "dev":
  case "--dev":
    dev();
    break;
  case "init":
  case "--init":
    init();
    break;
  case "update":
  case "--update":
    update();
    break;
  case "help":
  case "--help":
  case "-h":
    showHelp();
    break;
  default:
    console.log("Invalid command.");
    showHelp();
}
